# -*- coding: utf-8 -*-
"""catboost_predict.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Pv84HqEf9BbHFUB8bjresfjYY0v5fAyk
"""

!pip install catboost

import pickle
import pandas as pd
from catboost import CatBoostClassifier
import json


# Preprocessing Function
def preprocess_data_for_catboost(df, categorical_cols, missing_value_placeholder="UNKNOWN"):
    """
    Mengganti nilai NaN dengan 'UNKNOWN' di kolom kategorikal dan
    mengubah tipe data ke string.
    """
    df_processed = df.copy()
    for col in categorical_cols:
        if col in df_processed.columns:
            df_processed[col] = df_processed[col].fillna(missing_value_placeholder)
            df_processed[col] = df_processed[col].astype(str)
    return df_processed


# Fungsi Prediksi
def predict_conservation_and_plants(
    new_data,
    model_path="catboost_multilabel_model.cbm",
    components_path="model_components.pkl"
):
    """
    Prediksi rekomendasi konservasi dan tanaman menggunakan model CatBoost.

    Parameters:
        new_data: DataFrame input user
        model_path: path file model CatBoost (.cbm)
        components_path: path file komponen (.pkl)

    Returns:
        recommendations: List[(label, confidence, plants)]
        all_plants: List tanaman unik
    """

    model = CatBoostClassifier()
    model.load_model(model_path)
    with open(components_path, "rb") as f:
        components = pickle.load(f)

    mlb = components['mlb']
    label_to_tanaman = components['label_to_tanaman']
    categorical_cols = components['categorical_features_names']
    threshold = components['prediction_threshold']
    feature_names = components['feature_names']

    # Preprocess data
    new_data_processed = preprocess_data_for_catboost(new_data, categorical_cols)

    # Tambahkan kolom yang hilang
    for col in feature_names:
        if col not in new_data_processed.columns:
            new_data_processed[col] = "UNKNOWN"

    # Urutkan kolom sesuai model
    new_data_processed = new_data_processed[feature_names]

    # Prediksi probabilitas
    probabilities = model.predict_proba(new_data_processed)[0]

    recommendations = []
    all_recommended_plants = set()

    for i, label in enumerate(mlb.classes_):
        prob = probabilities[i]
        if prob > threshold:
            plants = label_to_tanaman.get(label, [])
            recommendations.append((label, prob, plants))
            all_recommended_plants.update(plants)

    # Urutkan berdasarkan confidence
    recommendations.sort(key=lambda x: x[1], reverse=True)

    return recommendations, list(all_recommended_plants)


# Fungsi Display Output
def display_recommendations(recommendations, all_plants):
    print("\n=== REKOMENDASI KONSERVASI ===")
    if recommendations:
        for i, (label, confidence, plants) in enumerate(recommendations, 1):
            print(f"{i}. {label}")
            print(f"   Confidence: {confidence:.2%}")
            if plants:
                print(f"   Tanaman: {', '.join(plants)}")
            else:
                print("   Tanaman: Tidak ada tanaman spesifik")
            print()
    else:
        print("Tidak ada rekomendasi yang memenuhi threshold.")

    print("=== RINGKASAN TANAMAN ===")
    if all_plants:
        for i, plant in enumerate(sorted(all_plants), 1):
            print(f"{i}. {plant}")
    else:
        print("Tidak ada tanaman yang direkomendasikan.")


# === 4. JSON to DataFrame Converter ===
def json_to_dataframe(json_input):
    """
    Mengubah JSON (dict/string) menjadi pandas DataFrame.
    JSON harus memiliki key 'data' berisi list of dict.
    """
    if isinstance(json_input, str):
        json_input = json.loads(json_input)
    return pd.DataFrame(json_input["data"])


if __name__ == "__main__":
    # Contoh JSON input user
    json_input = {
        "data": [
            {
                "FungsiKaw": "Areal Penggunaan Lain (APL)",
                "chbulan": None,
                "Lereng": "Curam",
                "Solumtnh": None,
                "JnsLahan": "Lahan Kering",
                "LC2024": "Kebun Campur",
                "ErosiPot": "Ringan",
                "TBE": "Sedang"
            }
        ]
    }

    new_data = json_to_dataframe(json_input)
    print("Input data (from JSON):")
    print(new_data)

    # Prediksi
    recommendations, all_plants = predict_conservation_and_plants(new_data)
    display_recommendations(recommendations, all_plants)

